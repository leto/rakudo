Rakudo Roadmap
--------------

Last updated: 2009-05-21

This document identifies the current major milestones and tasks
planned for Rakudo development as of May 2009.  The first
section identifies (in no particular order) large-scale and/or
significant development tasks that are currently being planned
or worked on by the development team.  The second section
then identifies specific Perl 6 features and capabilities,
and maps each to the large-scale tasks on which the feature
currently depends.  Overall we hope this gives a feel for
where current efforts are being placed and what we intend to
accomplish during the next 4-6 months.

In general we haven't identified specific timelines or
priorities for the tasks; one of our goals for early Summer 2009
will be to develop an expected timeline for each item to make 
it easier to evaluate our rate of progress.

Patches to this document are welcome.


Large-scale tasks
-----------------

A.  PGE refactors:  The Parrot Grammar Engine (PGE) will be 
undergoing some significant refactoring in summer 2009; these 
refactors will provide the ability to implement protoregexes 
and longest token matching.  The goal is to get something that 
is much closer to what is being used to develop STD.pm .  
Internally these refactors will likely involve a new operator 
precedence parser and grafting DFA capabilities to the existing 
regex engine.  Patrick Michaud is leading this development.

B.  Parrot calling conventions:  As of May 2009, Parrot's
calling conventions do not facilitate all of the dispatch
mechanisms needed for Perl 6; in particular, Parrot does
not cleanly support "named-only" parameters, binding named
arguments to positional parameters, or collecting arguments
into "captures".  These features are currently scheduled
to be implemented by the July 2009 Parrot release.

C.  Rakudo method and sub dispatch:  As the Parrot calling
conventions evolve, Rakudo's existing dispatch (largely
written in a mixture of PIR and C) can be replaced by
much more efficient dispatch algorithms.  This may also
involve significant refactors of the base Object class
and Parrot's P6object implementation.  Jonathan Worthington
is heading up this effort.

D.  Parrot context and return continuation handling:  Ideally 
we'd like Parrot to directly support "leave" semantics -- i.e.,
forcing a sub (other than the current one) to return
and rolling up the dynamic stack as appropriate.
In addition, we'd like to be able to tag subs with
"exit handlers" -- code to be automatically invoked
on subroutine exit.  Parrot has some (limited?) support
for these features; we need to investigate what exists
now and determine what needs to be added.

In particular, it's conjectured that "leave" and roll-up
capabilities should I<not> be implemented using exceptions
and exception handlers.

E.  Lexical symbol management:  Much of Rakudo and Parrot is
designed on a Perl 5 "package-based" model; by contrast,
most of Perl 6 is based purely on lexical scoping rules.
Rakudo will need some significant refactoring to change its
various package-based views of name lookups into equivalent 
lexically-scoped ones.

F.  Laziness:  Many operations in Rakudo are currently "eager";
these need to be into lazy equivalents.  The first step of
this will be a substantial refactor of List, Array, and
Positional roles to avoid inheriting from Parrot's
ResizablePMCArray; afterwards we'll update these roles
to incorporate laziness.  This task will also require
exploration of the Iterator role and specification.

G.  Native types and compact structs:  Currently we don't
have a detailed plan for handling "native types" (int, str,
num) or compact arrays and structs in Parrot, nor do we
have a definite timeline for creating a plan.  Essentially
we're waiting for someone to step up to work on this task.
It will require some knowledge of PIR, C, and Parrot internals.

H.  Perl 6 specification:  Some items to be completed
really want/need spec clarification before a great detail
of progress can be made.  Sometimes this is a catch-22,
in that the spec sometimes wants implementations to try
a variety of designs before settling on a specific design.
Either way, there's still a fair bit of spec work to be done, 
especially for I/O, modules, language interoperability, and
STD.pm itself.

I.  Parrot and other installation issues:  As of this writing,
Rakudo still has minor issues working against an installed
Parrot; we also need to work out library storage and
resolution issues at each of the Parrot, Rakudo, and Perl 6
levels.

Z.  Explicitly postponed items:  Some items we explicitly
postpone until later in Rakudo development.  There are generally
a variety of reasons we might do this:
  (Z1) it's not an immediately pressing issue and there's
       little penalty or some benefit from delaying work on it
  (Z2) the spec is vague or non-existent on the topic
  (Z3) we expect the spec or STD.pm to change or evolve substantially
  (Z4) we expect Parrot or the compiler environment to change substantially
  (Z5) the item appears to be Really Hard "right now"
  (Z6) other blockers


Specific Perl 6 features and development tasks
----------------------------------------------

  * protoregexes (A)
  * longest token matching semantics in regexes (A)
  * operator adverbs (A)
  * quoting adverbs (A)
  * regex modifiers (A)
  * domain-specific languages (A)
  * item assignment (A)
  * embedded closures in regexes (A)
  * declare contextual and lexical vars in regexes (A)
  * lexical variable lookups in regexes (A)
  * cleanly add circumfix:, postcircumfix:, other custom tokens (A)
  * true hyper/cross/reverse/other metaoperators (A)

  * binding named arguments to positional parameters (B)
  * nested signatures (B)
  * captures in signatures and return values (B)
  * unpacking arguments (B,C)
  * clean up subtypes in multi-dispatch (?)
  * better gather/take handling of arguments (H)

  * better return value checking (D)
  * ENTER/LEAVE/LAST/NEXT/FIRST/REDO control blocks (D)
  * return multiple values from a sub (B,D)
  * temp variables (D)

  * maintain candidate lists in lexicals (C, E)
  * lexical classes and roles (E)
  * importing module symbols into the current lexical scope (E)
  * develop installation standards (E, F, I)
  * Pseudo-packages MY, CONTEXT, OUTER, $?LINE, etc.  (D, E)

  * lazy lists (F)
  * array/hash element vivification (F)
  * array/hash vivification (F)
  * overloadable postcircumfix:<[ ]> and postcircumfix:<{ }> (F)
  * lazy gather/take (F)
  * feed operators (F)
  * slice context (B, F, H, C?)
  * proper trait definition and usage (H)
 
  * Buf (G)
  * Native typed scalars (G)
  * Packed arrays (G)
  * Compact structures (G)
  * Rat, BigNum, numification improvements (G, H)
  * Other S02 data types -- KeySet, KeyBag (G, H)
  * Sized types -- int32, int8  (G)
  * Specialized Unicode bits -- .codes, .graphs, .bytes (G, H)

  * heredocs (H, Z3)
  * pod heredocs (H, Z3)
  * macros (H, Z)
  * module versioning and download (I, Z)
